{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNLXXH79P4KhbGwAfgTUyjO"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q9S7K9S-clcT","executionInfo":{"status":"ok","timestamp":1666656155519,"user_tz":-330,"elapsed":9,"user":{"displayName":"209X1A05B3 PAMULURI PRANEETH KUMAR REDDY","userId":"04490706355721690785"}},"outputId":"581a3663-f38d-4a0e-db22-946b84bbe539"},"outputs":[{"output_type":"stream","name":"stdout","text":["((3, 2), (3, 2))\n","()\n"]}],"source":["\n","\n","\n","from kanren import run, var, fact\n","from kanren.assoccomm import eq_assoccomm as eq\n","from kanren.assoccomm import commutative, associative\n","addition = 'add'\n","multiplication = 'mul'\n","fact(commutative, multiplication)\n","fact(commutative, addition)\n","fact(associative, multiplication)\n","fact(associative, addition)\n","x, y = var('a'), var('b')\n","OriginalPattern = (multiplication, (addition, 5, x), y)\n","ex1 = (multiplication, 2, (addition, 5, 3))\n","ex2 = (addition,5,(multiplication,8,1))\n","print(run(0, (x,y), eq(ex1,OriginalPattern)))\n","print(run(0, (x,y), eq(ex2, OriginalPattern)))\n"]}]}